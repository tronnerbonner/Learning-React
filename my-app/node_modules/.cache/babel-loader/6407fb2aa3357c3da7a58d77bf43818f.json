{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tanne\\\\Documents\\\\Learning React\\\\Projects\\\\code\\\\my-app\\\\src\\\\shoppingList\\\\ShoppingList.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ShoppingList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItemName: '',\n      groceryItems: [{\n        name: 'Bananas',\n        id: 'item-1',\n        completed: false\n      }, {\n        name: 'Apples',\n        id: 'item-2',\n        completed: true\n      }, {\n        name: 'Rice',\n        id: 'item-3',\n        completed: false\n      }],\n      validationErrors: {},\n      submitted: 0\n    };\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.handleCompletedToggle = this.handleCompletedToggle.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleOnSubmit = this.handleOnSubmit.bind(this);\n    this.validateFields = this.validateFields.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevStateString = JSON.stringify(prevState.groceryItems);\n    const updatedStateString = JSON.stringify(this.state.groceryItems);\n\n    if (prevStateString !== updatedStateString) {\n      console.log(\"Save this:\", updatedStateString);\n      localStorage.setItem('groceryItems', updatedStateString);\n    }\n  }\n\n  handleOnChange(e) {\n    const target = e.target;\n    const name = target.name;\n    const value = target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleCompletedToggle(e) {\n    const target = e.target;\n    const itemindexValue = target.attributes.itemindex.value;\n    const index = parseInt(itemindexValue, 10); // access input's custom attribute\n\n    console.log('toggling: ' + index);\n    const newGroceryItemsState = [...this.state.groceryItems]; //newGroceryItemsState[index].completed = target.checked\n\n    newGroceryItemsState[index] = { ...newGroceryItemsState[index],\n      completed: target.checked\n    };\n    this.setState({\n      groceryItems: newGroceryItemsState\n    });\n  }\n\n  handleDelete(e) {\n    const target = e.target;\n    const itemindexValue = target.attributes.itemindex.value;\n    const index = parseInt(itemindexValue, 10); // access button's custom attribute\n\n    console.log('deleting: ' + index);\n    const newGroceryItemsState = [...this.state.groceryItems];\n    newGroceryItemsState.splice(index, 1);\n    this.setState({\n      groceryItems: newGroceryItemsState\n    });\n  }\n\n  handleOnSubmit(e) {\n    e.preventDefault();\n    const isFormValid = this.validateFields();\n\n    if (isFormValid) {\n      const newGroceryItemObject = {\n        completed: false,\n        name: this.state.newItemName,\n        id: 'item-' + Date.now()\n      };\n      this.setState(state => {\n        return {\n          submitted: state.submitted + 1,\n          groceryItems: [...state.groceryItems, newGroceryItemObject],\n          newItemName: ''\n        };\n      });\n    }\n  }\n\n  validateFields() {\n    const {\n      newItemName\n    } = this.state;\n    const errors = {};\n\n    if (!newItemName) {\n      errors['newItemName'] = 'Please enter grocery item name';\n    }\n\n    this.setState({\n      validationErrors: errors\n    });\n    return Object.keys(errors).length === 0;\n  }\n\n  render() {\n    const {\n      newItemName: newItemNameError\n    } = this.state.validationErrors;\n    const {\n      groceryItems\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Shopping List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }, this), !groceryItems.length && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No items!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 35\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: groceryItems.map((item, index) => {\n            return (\n              /*#__PURE__*/\n              // <li key={index}>\n              _jsxDEV(\"li\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: item.completed,\n                  onChange: this.handleCompletedToggle,\n                  itemindex: index // lowercase 'itemindex' as per React docs\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: item.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  itemindex: index,\n                  onClick: this.handleDelete,\n                  children: \"\\u2715\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 19\n                }, this)]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 17\n              }, this)\n            );\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleOnSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"error\",\n              children: newItemNameError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"newItemName\",\n              placeholder: \"Bananas\",\n              value: this.state.newItemName,\n              onChange: this.handleOnChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Submitted \", this.state.submitted, \" times!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default ShoppingList;","map":{"version":3,"sources":["C:/Users/tanne/Documents/Learning React/Projects/code/my-app/src/shoppingList/ShoppingList.js"],"names":["React","Component","ShoppingList","constructor","props","state","newItemName","groceryItems","name","id","completed","validationErrors","submitted","handleOnChange","bind","handleCompletedToggle","handleDelete","handleOnSubmit","validateFields","componentDidUpdate","prevProps","prevState","prevStateString","JSON","stringify","updatedStateString","console","log","localStorage","setItem","e","target","value","setState","itemindexValue","attributes","itemindex","index","parseInt","newGroceryItemsState","checked","splice","preventDefault","isFormValid","newGroceryItemObject","Date","now","errors","Object","keys","length","render","newItemNameError","map","item"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass ShoppingList extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      newItemName: '',\r\n      groceryItems: [\r\n        { name: 'Bananas', id: 'item-1', completed: false },\r\n        { name: 'Apples', id: 'item-2', completed: true },\r\n        { name: 'Rice', id: 'item-3', completed: false }\r\n      ],\r\n      validationErrors: {},\r\n      submitted: 0\r\n    }\r\n\r\n    this.handleOnChange = this.handleOnChange.bind(this)\r\n    this.handleCompletedToggle = this.handleCompletedToggle.bind(this)\r\n    this.handleDelete = this.handleDelete.bind(this)\r\n    this.handleOnSubmit = this.handleOnSubmit.bind(this)\r\n    this.validateFields = this.validateFields.bind(this)\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n      const prevStateString = JSON.stringify(prevState.groceryItems)\r\n      const updatedStateString = JSON.stringify(this.state.groceryItems)\r\n\r\n      if (prevStateString !== updatedStateString){\r\n          console.log(\"Save this:\", updatedStateString)\r\n          localStorage.setItem('groceryItems', updatedStateString)\r\n      }\r\n  }\r\n\r\n  handleOnChange(e) {\r\n    const target = e.target\r\n    const name = target.name\r\n    const value = target.value\r\n\r\n    this.setState({\r\n      [name]: value\r\n    })\r\n  }\r\n\r\n  handleCompletedToggle(e) {\r\n    const target = e.target\r\n    const itemindexValue = target.attributes.itemindex.value\r\n    const index = parseInt(itemindexValue, 10) // access input's custom attribute\r\n    \r\n    console.log('toggling: ' + index)\r\n\r\n    const newGroceryItemsState = [...this.state.groceryItems]\r\n    //newGroceryItemsState[index].completed = target.checked\r\n    newGroceryItemsState[index] = {\r\n        ...newGroceryItemsState[index],\r\n        completed: target.checked\r\n    }\r\n\r\n\r\n    this.setState({\r\n      groceryItems: newGroceryItemsState\r\n    })\r\n  }\r\n\r\n  handleDelete(e) {\r\n    const target = e.target\r\n    const itemindexValue = target.attributes.itemindex.value\r\n    const index = parseInt(itemindexValue, 10) // access button's custom attribute\r\n\r\n    console.log('deleting: ' + index)\r\n\r\n    const newGroceryItemsState = [...this.state.groceryItems]\r\n    newGroceryItemsState.splice(index, 1)\r\n\r\n    this.setState({\r\n      groceryItems: newGroceryItemsState\r\n    })\r\n  }\r\n\r\n  handleOnSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    const isFormValid = this.validateFields()\r\n\r\n    if (isFormValid) {\r\n      const newGroceryItemObject = {\r\n        completed: false,\r\n        name: this.state.newItemName,\r\n        id: 'item-' + Date.now()\r\n      }\r\n      this.setState((state) => {\r\n        return {\r\n          submitted: state.submitted + 1,\r\n          groceryItems: [...state.groceryItems, newGroceryItemObject],\r\n          newItemName: ''\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  validateFields() {\r\n    const {\r\n      newItemName\r\n    } = this.state\r\n\r\n    const errors = {}\r\n\r\n    if (!newItemName) {\r\n      errors['newItemName'] = 'Please enter grocery item name'\r\n    }\r\n\r\n    this.setState({\r\n      validationErrors: errors\r\n    })\r\n\r\n    return Object.keys(errors).length === 0\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      newItemName: newItemNameError,\r\n    } = this.state.validationErrors\r\n\r\n    const {\r\n      groceryItems\r\n    } = this.state\r\n\r\n    return (\r\n      <>\r\n      <section>\r\n        <h3>Shopping List</h3>\r\n        { !groceryItems.length && <p>No items!</p> }\r\n        <ul>\r\n          {\r\n            groceryItems.map((item, index) => {\r\n              return (\r\n                // <li key={index}>\r\n                <li key={item.id}>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={item.completed}\r\n                    onChange={this.handleCompletedToggle}\r\n                    itemindex={index} // lowercase 'itemindex' as per React docs\r\n                  />\r\n                  <span>{item.name}</span>\r\n                  <button\r\n                    itemindex={index}\r\n                    onClick={this.handleDelete}\r\n                  >\r\n                    ✕\r\n                  </button>\r\n                </li>\r\n              )\r\n            })\r\n          }\r\n        </ul>\r\n        <form onSubmit={this.handleOnSubmit}>\r\n          <label>\r\n            <span className=\"error\">{newItemNameError}</span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"newItemName\"\r\n              placeholder=\"Bananas\"\r\n              value={this.state.newItemName}\r\n              onChange={this.handleOnChange}\r\n            />\r\n          </label>\r\n\r\n          <button type=\"submit\">Submit</button>\r\n\r\n          <p>Submitted {this.state.submitted} times!</p>\r\n        </form>\r\n      </section>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ShoppingList;"]},"metadata":{},"sourceType":"module"}